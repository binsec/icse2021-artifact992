# 62 "xdesktopwaves.c"
int xdwOptVerb;

# 87 "xdesktopwaves.c"
int xdwOptViscosity;

# 884 "xdesktopwaves.c"
int xdwCPUHasCPUID =0;

# 885 "xdesktopwaves.c"
int xdwCPUIsAuthenticAMD=0;

# 886 "xdesktopwaves.c"
int xdwCPUIsGenuineIntel=0;

# 887 "xdesktopwaves.c"
int xdwCPUHasMMX =0;

# 888 "xdesktopwaves.c"
int xdwCPUHasFXSR =0;

# 889 "xdesktopwaves.c"
int xdwCPUHasSSE =0;

# 890 "xdesktopwaves.c"
int xdwCPUHasSSE2 =0;

/*@ rustina_out_of_scope */
# 893 "xdesktopwaves.c"
static void xdwDetectCPUFeatures(void)
{





 int features;

 /* Detection of 32-bit x86 CPU. */

 /* Check for CPUID. */
 asm volatile (
  "  pushfl                   \n"
  "  popl   %%eax             \n"
  "  movl   %%eax,%%ecx       \n"
  "  xorl   $0x00200000,%%eax \n"
  "  pushl  %%eax             \n"
  "  popfl                    \n"
  "  pushfl                   \n"
  "  popl   %%eax             \n"
  "  xorl   %%ecx,%%eax       \n"
  "  pushl  %%ecx             \n"
  "  popfl                    \n"
  "  andl   $0x00200000,%%eax \n"
  "  shrl   $21,%%eax         \n"
  : "=a"(xdwCPUHasCPUID) : : "ecx","edx","cc"
 );

 /* Check for Authentic AMD. */
 if (xdwCPUHasCPUID) asm volatile (
  "  xorl   %%eax,%%eax       \n"
  "  cpuid                    \n"
  "  xorl   %%eax,%%eax       \n"
  "  cmp    $0x68747541,%%ebx \n"
  "  jne    XDWDCAA_1         \n"
  "  cmpl   $0x69746e65,%%edx \n"
  "  jne    XDWDCAA_1         \n"
  "  cmpl   $0x444d4163,%%ecx \n"
  "  jne    XDWDCAA_1         \n"
  "  movl   $1,%%eax          \n"
  "XDWDCAA_1:                 \n"
  : "=a"(xdwCPUIsAuthenticAMD) : : "ebx","ecx","edx","cc"
 );

 /* Check for Genuine Intel. */
 if (xdwCPUHasCPUID) asm volatile (
  "  xorl   %%eax,%%eax       \n"
  "  cpuid                    \n"
  "  xorl   %%eax,%%eax       \n"
  "  cmpl   $0x756e6547,%%ebx \n"
  "  jne    XDWDCGI_1         \n"
  "  cmpl   $0x49656e69,%%edx \n"
  "  jne    XDWDCGI_1         \n"
  "  cmpl   $0x6c65746e,%%ecx \n"
  "  jne    XDWDCGI_1         \n"
  "  movl   $1,%%eax          \n"
  "XDWDCGI_1:                 \n"
  : "=a"(xdwCPUIsGenuineIntel) : : "ebx","ecx","edx","cc"
 );

 /* Check for MMX, FXSR, SSE and SSE2. */
 if (xdwCPUIsAuthenticAMD || xdwCPUIsGenuineIntel) {
  asm volatile (
   "  movl $1,%%eax            \n"
   "  cpuid                    \n"
   : "=d"(features) : : "eax","ebx","ecx","cc"
  );
  if (features&(1<<23)) xdwCPUHasMMX =1;
  if (features&(1<<24)) xdwCPUHasFXSR=1;
  if (features&(1<<25)) xdwCPUHasSSE =1;
  if (features&(1<<26)) xdwCPUHasSSE2=1;
 }
# 1035 "xdesktopwaves.c"
 /* Report detected features if very verbose. */
 if (xdwOptVerb>=2) {
  if (xdwCPUHasCPUID ) printf("CPUID detected\n");
  if (xdwCPUIsGenuineIntel) printf("Genuine Intel detected\n");
  if (xdwCPUIsAuthenticAMD) printf("Authentic AMD detected\n");
  if (xdwCPUHasMMX ) printf("MMX detected\n");
  if (xdwCPUHasFXSR ) printf("FXSR detected\n");
  if (xdwCPUHasSSE ) printf("SSE detected\n");
  if (xdwCPUHasSSE2 ) printf("SSE2 detected\n");
 }
}

# 1056 "xdesktopwaves.c"
int xdwCellMemCols;

# 1093 "xdesktopwaves.c"
const int xdwCellFadingTable[64]={
 /* Table for the trick of fading from covered to uncovered and back. The
	   values are added to the level of a faded cell on each time slice. The
	   index is 32 plus the fading value which ranges from -25 to 25 (see
	   description of xdwCells). */
    0, 0, 0, 0, 0, 0, 0,
  -36, -72, -108, -143, -178,
 -212, -246, -278, -310, -340,
 -369, -397, -424, -448, -472,
 -493, -513, -531, -546, -560,
 -572, -582, -590, -595, -598,
    0,
 -450, -471, -485, -489, -484,
 -470, -445, -411, -367, -314,
 -253, -183, -107, -24, 61,
  151, 243, 335, 425, 512,
  594, 669, 737, 795, 843,
    0, 0, 0, 0, 0, 0
};

# 1308 "xdesktopwaves.c"
static void xdwOperateCellsOpt0(short * cells, int count)
{
 short * p, * pe;
 int l1, l2, l3, v, c, cols, cols3;

 /* Here's the core algorithm of this program - at optimization level 0.
	   It performs one step (one time slice) of the cellular automata for one
	   row of cells (or less). The velocity of each cell is adapted by the
	   difference of the level and the average level of the adjacent cells
	   (think of springs between the cells). The velocity is even adapted by
	   friction (viscosity). Of course, the level of each cell is adapted by
	   velocity. Besides, the influence of covering (boats...) and its fading
	   is calculated here. Velocity is updated one row ahead of level and fading.
	   With i = 0 to count-1, cells[i] is the modified level and
	   cells[4*xdwCellMemCols+i] is the modified velocity. The macro stuff is
	   just for making true constants from viscosity parameters, this may
	   produce faster code. */
# 1369 "xdesktopwaves.c"
 switch(xdwOptViscosity) {
  case 1: cols=xdwCellMemCols; cols3=cols*3; p=cells; pe=p+count; l1=p[cols3-1]; l2=p[cols3]; do { v=p[4*cols]; v-=(v+511)>>10; v+=l1; l1=l2; l2<<=2; v-=l2; l3=p[0]; v+=l3; l3+=p[cols]>>2; v+=p[2*cols3]; c=p[2*cols]; if (c) { if ((c&0xfc00)!=0) { l3+=xdwCellFadingTable[(c>>10)+32]; if (c>0) { c-=1<<10; p[cols]=0; } else { c+=1<<10; } p[2*cols]=c; } else { l3=0; p[cols]=0; } } if (l3>0x7fff) l3=0x7fff; else if (l3<-0x8000) l3=-0x8000; p[0]=(short)l3; l2=p[cols3+1]; v+=l2; if (v>0x7fff) v=0x7fff; else if (v<-0x8000) v=-0x8000; p[4*cols]=(short)v; p++; } while(p<pe); break;
  case 2: cols=xdwCellMemCols; cols3=cols*3; p=cells; pe=p+count; l1=p[cols3-1]; l2=p[cols3]; do { v=p[4*cols]; v-=(v+255)>>9; v+=l1; l1=l2; l2<<=2; v-=l2; l3=p[0]; v+=l3; l3+=p[cols]>>2; v+=p[2*cols3]; c=p[2*cols]; if (c) { if ((c&0xfc00)!=0) { l3+=xdwCellFadingTable[(c>>10)+32]; if (c>0) { c-=1<<10; p[cols]=0; } else { c+=1<<10; } p[2*cols]=c; } else { l3=0; p[cols]=0; } } if (l3>0x7fff) l3=0x7fff; else if (l3<-0x8000) l3=-0x8000; p[0]=(short)l3; l2=p[cols3+1]; v+=l2; if (v>0x7fff) v=0x7fff; else if (v<-0x8000) v=-0x8000; p[4*cols]=(short)v; p++; } while(p<pe); break;
  case 3: cols=xdwCellMemCols; cols3=cols*3; p=cells; pe=p+count; l1=p[cols3-1]; l2=p[cols3]; do { v=p[4*cols]; v-=(v+127)>>8; v+=l1; l1=l2; l2<<=2; v-=l2; l3=p[0]; v+=l3; l3+=p[cols]>>2; v+=p[2*cols3]; c=p[2*cols]; if (c) { if ((c&0xfc00)!=0) { l3+=xdwCellFadingTable[(c>>10)+32]; if (c>0) { c-=1<<10; p[cols]=0; } else { c+=1<<10; } p[2*cols]=c; } else { l3=0; p[cols]=0; } } if (l3>0x7fff) l3=0x7fff; else if (l3<-0x8000) l3=-0x8000; p[0]=(short)l3; l2=p[cols3+1]; v+=l2; if (v>0x7fff) v=0x7fff; else if (v<-0x8000) v=-0x8000; p[4*cols]=(short)v; p++; } while(p<pe); break;
  case 4: cols=xdwCellMemCols; cols3=cols*3; p=cells; pe=p+count; l1=p[cols3-1]; l2=p[cols3]; do { v=p[4*cols]; v-=(v+63)>>7; v+=l1; l1=l2; l2<<=2; v-=l2; l3=p[0]; v+=l3; l3+=p[cols]>>2; v+=p[2*cols3]; c=p[2*cols]; if (c) { if ((c&0xfc00)!=0) { l3+=xdwCellFadingTable[(c>>10)+32]; if (c>0) { c-=1<<10; p[cols]=0; } else { c+=1<<10; } p[2*cols]=c; } else { l3=0; p[cols]=0; } } if (l3>0x7fff) l3=0x7fff; else if (l3<-0x8000) l3=-0x8000; p[0]=(short)l3; l2=p[cols3+1]; v+=l2; if (v>0x7fff) v=0x7fff; else if (v<-0x8000) v=-0x8000; p[4*cols]=(short)v; p++; } while(p<pe); break;
  case 5: cols=xdwCellMemCols; cols3=cols*3; p=cells; pe=p+count; l1=p[cols3-1]; l2=p[cols3]; do { v=p[4*cols]; v-=(v+31)>>6; v+=l1; l1=l2; l2<<=2; v-=l2; l3=p[0]; v+=l3; l3+=p[cols]>>2; v+=p[2*cols3]; c=p[2*cols]; if (c) { if ((c&0xfc00)!=0) { l3+=xdwCellFadingTable[(c>>10)+32]; if (c>0) { c-=1<<10; p[cols]=0; } else { c+=1<<10; } p[2*cols]=c; } else { l3=0; p[cols]=0; } } if (l3>0x7fff) l3=0x7fff; else if (l3<-0x8000) l3=-0x8000; p[0]=(short)l3; l2=p[cols3+1]; v+=l2; if (v>0x7fff) v=0x7fff; else if (v<-0x8000) v=-0x8000; p[4*cols]=(short)v; p++; } while(p<pe); break;
 }
}

# 1379 "xdesktopwaves.c"
static int xdwOperateCellsOpt1(short * cells, int count)
{






 /* Optimization level 1 of the cellular automata using the MMX instruction
	   set of a 32-bit x86 CPU, implemented as GNU-C inline assembler. It is
	   assumed that the covering of a cell is not greater than 255 (it can be up
	   to 1023 per definition). If it's greater, the algorithm is still correct
	   but takes some extra time. */

 static int reported=0;
 int i;

 if (xdwCPUHasMMX) {
  if (!reported) {
   if (xdwOptVerb>=1) printf("Using MMX instruction set of 32-bit x86 CPU\n");
   reported=1;
  }
  i=(((short*)0)-cells)&3;
  if (i) {
   xdwOperateCellsOpt0(cells,i);
   cells+=i;
   count-=i;
  }
# 1520 "xdesktopwaves.c"
  switch(xdwOptViscosity) {
   case 1: asm volatile ( "  pushl %%ebp                         \n" "  pushl %%edx                         \n" "  pushl %%edi                         \n" "  subl $200,%%esp                     \n" "  fnsave (%%esp)                      \n" "  movl %%edx,%%ebp                    \n" "  pcmpeqw %%mm7,%%mm7                 \n" "  psrlw $" "7" ",%%mm7                \n" "  movq (%%edi,%%ecx),%%mm6            \n" "  movzwl -2(%%edi,%%ecx),%%eax        \n" "  movd %%eax,%%mm5                    \n" "  movq %%mm6,%%mm0                    \n" "  psllq $16,%%mm0                     \n" "  paddsw %%mm0,%%mm5                  \n" "  psubsw %%mm6,%%mm5                  \n" "  jmp " "XDWOCO1_1_" "3                         \n" "  .balign 16                          \n" "XDWOCO1_1_" "1:                                 \n" "  pxor %%mm4,%%mm4                    \n" "  movq %%mm4,(%%edi,%%ebx)            \n" "XDWOCO1_1_" "2:                                 \n" "  psubsw %%mm2,%%mm3                  \n" "  movq %%mm4,(%%edi)                  \n" "  movq %%mm3,(%%edi,%%ebx,4)          \n" "  addl $8,%%edi                       \n" "XDWOCO1_1_" "3:                                 \n" "  cmpl %%esi,%%edi                    \n" "  jnc " "XDWOCO1_1_" "9                         \n" "  movq (%%edi,%%ebx,4),%%mm3          \n" "  pxor %%mm2,%%mm2                    \n" "  pcmpeqb (%%edi,%%ebx,2),%%mm2       \n" "  movq %%mm3,%%mm1                    \n" "  paddsw %%mm5,%%mm3                  \n" "  paddsw %%mm7,%%mm1                  \n" "  movq (%%edi),%%mm4                  \n" "  psrlq $16,%%mm5                     \n" "  psllw $1,%%mm2                      \n" "  psubsw %%mm5,%%mm3                  \n" "  packsswb %%mm2,%%mm2                \n" "  movq (%%edi,%%ecx,2),%%mm0          \n" "  psraw $" "10" ",%%mm1                \n" "  movq %%mm6,%%mm5                    \n" "  movd %%mm2,%%eax                    \n" "  psubsw %%mm1,%%mm3                  \n" "  psubsw %%mm4,%%mm6                  \n" "  movq (%%edi,%%ebx),%%mm1            \n" "  psubsw %%mm6,%%mm3                  \n" "  psubsw %%mm5,%%mm0                  \n" "  movq 8(%%edi,%%ecx),%%mm6           \n" "  paddsw %%mm0,%%mm3                  \n" "  psrlq $48,%%mm5                     \n" "  movq %%mm6,%%mm0                    \n" "  psraw $2,%%mm1                      \n" "  psllq $16,%%mm0                     \n" "  psubsw %%mm6,%%mm5                  \n" "  paddsw %%mm1,%%mm4                  \n" "  movq %%mm5,%%mm2                    \n" "  cmpl $0xfefefefe,%%eax              \n" "  psllq $48,%%mm2                     \n" "  paddsw %%mm0,%%mm5                  \n" "  je " "XDWOCO1_1_" "2                          \n" "  cmpl $0x80808080,%%eax              \n" "  je " "XDWOCO1_1_" "1                          \n" "  pcmpeqd %%mm1,%%mm1                 \n" "  psrlq $48,%%mm1                     \n" "  movl $4,%%edx                       \n" "XDWOCO1_1_" "4:                                 \n" "  movzwl (%%edi,%%ebx,2),%%eax        \n" "  testl %%eax,%%eax                   \n" "  je " "XDWOCO1_1_" "8                          \n" "  testl $0x0000fc00,%%eax             \n" "  je " "XDWOCO1_1_" "6                          \n" "  shrl $10,%%eax                      \n" "  addl $32,%%eax                      \n" "  andl $63,%%eax                      \n" "  movd (%%ebp,%%eax,4),%%mm0          \n" "  punpcklwd %%mm0,%%mm0               \n" "  punpckldq %%mm0,%%mm0               \n" "  pand %%mm1,%%mm0                    \n" "  paddsw %%mm0,%%mm4                  \n" "  testl $32,%%eax                     \n" "  jne " "XDWOCO1_1_" "5                         \n" "  addw $0x0400,(%%edi,%%ebx,2)        \n" "  jmp " "XDWOCO1_1_" "8                         \n" "XDWOCO1_1_" "5:                                 \n" "  subw $0x0400,(%%edi,%%ebx,2)        \n" "  jmp " "XDWOCO1_1_" "7                         \n" "XDWOCO1_1_" "6:                                 \n" "  movq %%mm1,%%mm0                    \n" "  pandn %%mm4,%%mm0                   \n" "  movq %%mm0,%%mm4                    \n" "XDWOCO1_1_" "7:                                 \n" "  movw $0,(%%edi,%%ebx)               \n" "XDWOCO1_1_" "8:                                 \n" "  psllq $16,%%mm1                     \n" "  addl $2,%%edi                       \n" "  decl %%edx                          \n" "  jnz " "XDWOCO1_1_" "4                         \n" "  subl $8,%%edi                       \n" "  jmp " "XDWOCO1_1_" "2                         \n" "XDWOCO1_1_" "9:                                 \n" "  frstor (%%esp)                      \n" "  addl $200,%%esp                     \n" "  popl %%edi                          \n" "  popl %%edx                          \n" "  popl %%ebp                          \n" : : "D"(cells),"S"(cells+(count&~3)),"b"(2*xdwCellMemCols), "c"(3*2*xdwCellMemCols),"d"(xdwCellFadingTable) : "eax","memory","cc" ); break;
   case 2: asm volatile ( "  pushl %%ebp                         \n" "  pushl %%edx                         \n" "  pushl %%edi                         \n" "  subl $200,%%esp                     \n" "  fnsave (%%esp)                      \n" "  movl %%edx,%%ebp                    \n" "  pcmpeqw %%mm7,%%mm7                 \n" "  psrlw $" "8" ",%%mm7                \n" "  movq (%%edi,%%ecx),%%mm6            \n" "  movzwl -2(%%edi,%%ecx),%%eax        \n" "  movd %%eax,%%mm5                    \n" "  movq %%mm6,%%mm0                    \n" "  psllq $16,%%mm0                     \n" "  paddsw %%mm0,%%mm5                  \n" "  psubsw %%mm6,%%mm5                  \n" "  jmp " "XDWOCO1_2_" "3                         \n" "  .balign 16                          \n" "XDWOCO1_2_" "1:                                 \n" "  pxor %%mm4,%%mm4                    \n" "  movq %%mm4,(%%edi,%%ebx)            \n" "XDWOCO1_2_" "2:                                 \n" "  psubsw %%mm2,%%mm3                  \n" "  movq %%mm4,(%%edi)                  \n" "  movq %%mm3,(%%edi,%%ebx,4)          \n" "  addl $8,%%edi                       \n" "XDWOCO1_2_" "3:                                 \n" "  cmpl %%esi,%%edi                    \n" "  jnc " "XDWOCO1_2_" "9                         \n" "  movq (%%edi,%%ebx,4),%%mm3          \n" "  pxor %%mm2,%%mm2                    \n" "  pcmpeqb (%%edi,%%ebx,2),%%mm2       \n" "  movq %%mm3,%%mm1                    \n" "  paddsw %%mm5,%%mm3                  \n" "  paddsw %%mm7,%%mm1                  \n" "  movq (%%edi),%%mm4                  \n" "  psrlq $16,%%mm5                     \n" "  psllw $1,%%mm2                      \n" "  psubsw %%mm5,%%mm3                  \n" "  packsswb %%mm2,%%mm2                \n" "  movq (%%edi,%%ecx,2),%%mm0          \n" "  psraw $" "9" ",%%mm1                \n" "  movq %%mm6,%%mm5                    \n" "  movd %%mm2,%%eax                    \n" "  psubsw %%mm1,%%mm3                  \n" "  psubsw %%mm4,%%mm6                  \n" "  movq (%%edi,%%ebx),%%mm1            \n" "  psubsw %%mm6,%%mm3                  \n" "  psubsw %%mm5,%%mm0                  \n" "  movq 8(%%edi,%%ecx),%%mm6           \n" "  paddsw %%mm0,%%mm3                  \n" "  psrlq $48,%%mm5                     \n" "  movq %%mm6,%%mm0                    \n" "  psraw $2,%%mm1                      \n" "  psllq $16,%%mm0                     \n" "  psubsw %%mm6,%%mm5                  \n" "  paddsw %%mm1,%%mm4                  \n" "  movq %%mm5,%%mm2                    \n" "  cmpl $0xfefefefe,%%eax              \n" "  psllq $48,%%mm2                     \n" "  paddsw %%mm0,%%mm5                  \n" "  je " "XDWOCO1_2_" "2                          \n" "  cmpl $0x80808080,%%eax              \n" "  je " "XDWOCO1_2_" "1                          \n" "  pcmpeqd %%mm1,%%mm1                 \n" "  psrlq $48,%%mm1                     \n" "  movl $4,%%edx                       \n" "XDWOCO1_2_" "4:                                 \n" "  movzwl (%%edi,%%ebx,2),%%eax        \n" "  testl %%eax,%%eax                   \n" "  je " "XDWOCO1_2_" "8                          \n" "  testl $0x0000fc00,%%eax             \n" "  je " "XDWOCO1_2_" "6                          \n" "  shrl $10,%%eax                      \n" "  addl $32,%%eax                      \n" "  andl $63,%%eax                      \n" "  movd (%%ebp,%%eax,4),%%mm0          \n" "  punpcklwd %%mm0,%%mm0               \n" "  punpckldq %%mm0,%%mm0               \n" "  pand %%mm1,%%mm0                    \n" "  paddsw %%mm0,%%mm4                  \n" "  testl $32,%%eax                     \n" "  jne " "XDWOCO1_2_" "5                         \n" "  addw $0x0400,(%%edi,%%ebx,2)        \n" "  jmp " "XDWOCO1_2_" "8                         \n" "XDWOCO1_2_" "5:                                 \n" "  subw $0x0400,(%%edi,%%ebx,2)        \n" "  jmp " "XDWOCO1_2_" "7                         \n" "XDWOCO1_2_" "6:                                 \n" "  movq %%mm1,%%mm0                    \n" "  pandn %%mm4,%%mm0                   \n" "  movq %%mm0,%%mm4                    \n" "XDWOCO1_2_" "7:                                 \n" "  movw $0,(%%edi,%%ebx)               \n" "XDWOCO1_2_" "8:                                 \n" "  psllq $16,%%mm1                     \n" "  addl $2,%%edi                       \n" "  decl %%edx                          \n" "  jnz " "XDWOCO1_2_" "4                         \n" "  subl $8,%%edi                       \n" "  jmp " "XDWOCO1_2_" "2                         \n" "XDWOCO1_2_" "9:                                 \n" "  frstor (%%esp)                      \n" "  addl $200,%%esp                     \n" "  popl %%edi                          \n" "  popl %%edx                          \n" "  popl %%ebp                          \n" : : "D"(cells),"S"(cells+(count&~3)),"b"(2*xdwCellMemCols), "c"(3*2*xdwCellMemCols),"d"(xdwCellFadingTable) : "eax","memory","cc" ); break;
   case 3: asm volatile ( "  pushl %%ebp                         \n" "  pushl %%edx                         \n" "  pushl %%edi                         \n" "  subl $200,%%esp                     \n" "  fnsave (%%esp)                      \n" "  movl %%edx,%%ebp                    \n" "  pcmpeqw %%mm7,%%mm7                 \n" "  psrlw $" "9" ",%%mm7                \n" "  movq (%%edi,%%ecx),%%mm6            \n" "  movzwl -2(%%edi,%%ecx),%%eax        \n" "  movd %%eax,%%mm5                    \n" "  movq %%mm6,%%mm0                    \n" "  psllq $16,%%mm0                     \n" "  paddsw %%mm0,%%mm5                  \n" "  psubsw %%mm6,%%mm5                  \n" "  jmp " "XDWOCO1_3_" "3                         \n" "  .balign 16                          \n" "XDWOCO1_3_" "1:                                 \n" "  pxor %%mm4,%%mm4                    \n" "  movq %%mm4,(%%edi,%%ebx)            \n" "XDWOCO1_3_" "2:                                 \n" "  psubsw %%mm2,%%mm3                  \n" "  movq %%mm4,(%%edi)                  \n" "  movq %%mm3,(%%edi,%%ebx,4)          \n" "  addl $8,%%edi                       \n" "XDWOCO1_3_" "3:                                 \n" "  cmpl %%esi,%%edi                    \n" "  jnc " "XDWOCO1_3_" "9                         \n" "  movq (%%edi,%%ebx,4),%%mm3          \n" "  pxor %%mm2,%%mm2                    \n" "  pcmpeqb (%%edi,%%ebx,2),%%mm2       \n" "  movq %%mm3,%%mm1                    \n" "  paddsw %%mm5,%%mm3                  \n" "  paddsw %%mm7,%%mm1                  \n" "  movq (%%edi),%%mm4                  \n" "  psrlq $16,%%mm5                     \n" "  psllw $1,%%mm2                      \n" "  psubsw %%mm5,%%mm3                  \n" "  packsswb %%mm2,%%mm2                \n" "  movq (%%edi,%%ecx,2),%%mm0          \n" "  psraw $" "8" ",%%mm1                \n" "  movq %%mm6,%%mm5                    \n" "  movd %%mm2,%%eax                    \n" "  psubsw %%mm1,%%mm3                  \n" "  psubsw %%mm4,%%mm6                  \n" "  movq (%%edi,%%ebx),%%mm1            \n" "  psubsw %%mm6,%%mm3                  \n" "  psubsw %%mm5,%%mm0                  \n" "  movq 8(%%edi,%%ecx),%%mm6           \n" "  paddsw %%mm0,%%mm3                  \n" "  psrlq $48,%%mm5                     \n" "  movq %%mm6,%%mm0                    \n" "  psraw $2,%%mm1                      \n" "  psllq $16,%%mm0                     \n" "  psubsw %%mm6,%%mm5                  \n" "  paddsw %%mm1,%%mm4                  \n" "  movq %%mm5,%%mm2                    \n" "  cmpl $0xfefefefe,%%eax              \n" "  psllq $48,%%mm2                     \n" "  paddsw %%mm0,%%mm5                  \n" "  je " "XDWOCO1_3_" "2                          \n" "  cmpl $0x80808080,%%eax              \n" "  je " "XDWOCO1_3_" "1                          \n" "  pcmpeqd %%mm1,%%mm1                 \n" "  psrlq $48,%%mm1                     \n" "  movl $4,%%edx                       \n" "XDWOCO1_3_" "4:                                 \n" "  movzwl (%%edi,%%ebx,2),%%eax        \n" "  testl %%eax,%%eax                   \n" "  je " "XDWOCO1_3_" "8                          \n" "  testl $0x0000fc00,%%eax             \n" "  je " "XDWOCO1_3_" "6                          \n" "  shrl $10,%%eax                      \n" "  addl $32,%%eax                      \n" "  andl $63,%%eax                      \n" "  movd (%%ebp,%%eax,4),%%mm0          \n" "  punpcklwd %%mm0,%%mm0               \n" "  punpckldq %%mm0,%%mm0               \n" "  pand %%mm1,%%mm0                    \n" "  paddsw %%mm0,%%mm4                  \n" "  testl $32,%%eax                     \n" "  jne " "XDWOCO1_3_" "5                         \n" "  addw $0x0400,(%%edi,%%ebx,2)        \n" "  jmp " "XDWOCO1_3_" "8                         \n" "XDWOCO1_3_" "5:                                 \n" "  subw $0x0400,(%%edi,%%ebx,2)        \n" "  jmp " "XDWOCO1_3_" "7                         \n" "XDWOCO1_3_" "6:                                 \n" "  movq %%mm1,%%mm0                    \n" "  pandn %%mm4,%%mm0                   \n" "  movq %%mm0,%%mm4                    \n" "XDWOCO1_3_" "7:                                 \n" "  movw $0,(%%edi,%%ebx)               \n" "XDWOCO1_3_" "8:                                 \n" "  psllq $16,%%mm1                     \n" "  addl $2,%%edi                       \n" "  decl %%edx                          \n" "  jnz " "XDWOCO1_3_" "4                         \n" "  subl $8,%%edi                       \n" "  jmp " "XDWOCO1_3_" "2                         \n" "XDWOCO1_3_" "9:                                 \n" "  frstor (%%esp)                      \n" "  addl $200,%%esp                     \n" "  popl %%edi                          \n" "  popl %%edx                          \n" "  popl %%ebp                          \n" : : "D"(cells),"S"(cells+(count&~3)),"b"(2*xdwCellMemCols), "c"(3*2*xdwCellMemCols),"d"(xdwCellFadingTable) : "eax","memory","cc" ); break;
   case 4: asm volatile ( "  pushl %%ebp                         \n" "  pushl %%edx                         \n" "  pushl %%edi                         \n" "  subl $200,%%esp                     \n" "  fnsave (%%esp)                      \n" "  movl %%edx,%%ebp                    \n" "  pcmpeqw %%mm7,%%mm7                 \n" "  psrlw $" "10" ",%%mm7                \n" "  movq (%%edi,%%ecx),%%mm6            \n" "  movzwl -2(%%edi,%%ecx),%%eax        \n" "  movd %%eax,%%mm5                    \n" "  movq %%mm6,%%mm0                    \n" "  psllq $16,%%mm0                     \n" "  paddsw %%mm0,%%mm5                  \n" "  psubsw %%mm6,%%mm5                  \n" "  jmp " "XDWOCO1_4_" "3                         \n" "  .balign 16                          \n" "XDWOCO1_4_" "1:                                 \n" "  pxor %%mm4,%%mm4                    \n" "  movq %%mm4,(%%edi,%%ebx)            \n" "XDWOCO1_4_" "2:                                 \n" "  psubsw %%mm2,%%mm3                  \n" "  movq %%mm4,(%%edi)                  \n" "  movq %%mm3,(%%edi,%%ebx,4)          \n" "  addl $8,%%edi                       \n" "XDWOCO1_4_" "3:                                 \n" "  cmpl %%esi,%%edi                    \n" "  jnc " "XDWOCO1_4_" "9                         \n" "  movq (%%edi,%%ebx,4),%%mm3          \n" "  pxor %%mm2,%%mm2                    \n" "  pcmpeqb (%%edi,%%ebx,2),%%mm2       \n" "  movq %%mm3,%%mm1                    \n" "  paddsw %%mm5,%%mm3                  \n" "  paddsw %%mm7,%%mm1                  \n" "  movq (%%edi),%%mm4                  \n" "  psrlq $16,%%mm5                     \n" "  psllw $1,%%mm2                      \n" "  psubsw %%mm5,%%mm3                  \n" "  packsswb %%mm2,%%mm2                \n" "  movq (%%edi,%%ecx,2),%%mm0          \n" "  psraw $" "7" ",%%mm1                \n" "  movq %%mm6,%%mm5                    \n" "  movd %%mm2,%%eax                    \n" "  psubsw %%mm1,%%mm3                  \n" "  psubsw %%mm4,%%mm6                  \n" "  movq (%%edi,%%ebx),%%mm1            \n" "  psubsw %%mm6,%%mm3                  \n" "  psubsw %%mm5,%%mm0                  \n" "  movq 8(%%edi,%%ecx),%%mm6           \n" "  paddsw %%mm0,%%mm3                  \n" "  psrlq $48,%%mm5                     \n" "  movq %%mm6,%%mm0                    \n" "  psraw $2,%%mm1                      \n" "  psllq $16,%%mm0                     \n" "  psubsw %%mm6,%%mm5                  \n" "  paddsw %%mm1,%%mm4                  \n" "  movq %%mm5,%%mm2                    \n" "  cmpl $0xfefefefe,%%eax              \n" "  psllq $48,%%mm2                     \n" "  paddsw %%mm0,%%mm5                  \n" "  je " "XDWOCO1_4_" "2                          \n" "  cmpl $0x80808080,%%eax              \n" "  je " "XDWOCO1_4_" "1                          \n" "  pcmpeqd %%mm1,%%mm1                 \n" "  psrlq $48,%%mm1                     \n" "  movl $4,%%edx                       \n" "XDWOCO1_4_" "4:                                 \n" "  movzwl (%%edi,%%ebx,2),%%eax        \n" "  testl %%eax,%%eax                   \n" "  je " "XDWOCO1_4_" "8                          \n" "  testl $0x0000fc00,%%eax             \n" "  je " "XDWOCO1_4_" "6                          \n" "  shrl $10,%%eax                      \n" "  addl $32,%%eax                      \n" "  andl $63,%%eax                      \n" "  movd (%%ebp,%%eax,4),%%mm0          \n" "  punpcklwd %%mm0,%%mm0               \n" "  punpckldq %%mm0,%%mm0               \n" "  pand %%mm1,%%mm0                    \n" "  paddsw %%mm0,%%mm4                  \n" "  testl $32,%%eax                     \n" "  jne " "XDWOCO1_4_" "5                         \n" "  addw $0x0400,(%%edi,%%ebx,2)        \n" "  jmp " "XDWOCO1_4_" "8                         \n" "XDWOCO1_4_" "5:                                 \n" "  subw $0x0400,(%%edi,%%ebx,2)        \n" "  jmp " "XDWOCO1_4_" "7                         \n" "XDWOCO1_4_" "6:                                 \n" "  movq %%mm1,%%mm0                    \n" "  pandn %%mm4,%%mm0                   \n" "  movq %%mm0,%%mm4                    \n" "XDWOCO1_4_" "7:                                 \n" "  movw $0,(%%edi,%%ebx)               \n" "XDWOCO1_4_" "8:                                 \n" "  psllq $16,%%mm1                     \n" "  addl $2,%%edi                       \n" "  decl %%edx                          \n" "  jnz " "XDWOCO1_4_" "4                         \n" "  subl $8,%%edi                       \n" "  jmp " "XDWOCO1_4_" "2                         \n" "XDWOCO1_4_" "9:                                 \n" "  frstor (%%esp)                      \n" "  addl $200,%%esp                     \n" "  popl %%edi                          \n" "  popl %%edx                          \n" "  popl %%ebp                          \n" : : "D"(cells),"S"(cells+(count&~3)),"b"(2*xdwCellMemCols), "c"(3*2*xdwCellMemCols),"d"(xdwCellFadingTable) : "eax","memory","cc" ); break;
   case 5: asm volatile ( "  pushl %%ebp                         \n" "  pushl %%edx                         \n" "  pushl %%edi                         \n" "  subl $200,%%esp                     \n" "  fnsave (%%esp)                      \n" "  movl %%edx,%%ebp                    \n" "  pcmpeqw %%mm7,%%mm7                 \n" "  psrlw $" "11" ",%%mm7                \n" "  movq (%%edi,%%ecx),%%mm6            \n" "  movzwl -2(%%edi,%%ecx),%%eax        \n" "  movd %%eax,%%mm5                    \n" "  movq %%mm6,%%mm0                    \n" "  psllq $16,%%mm0                     \n" "  paddsw %%mm0,%%mm5                  \n" "  psubsw %%mm6,%%mm5                  \n" "  jmp " "XDWOCO1_5_" "3                         \n" "  .balign 16                          \n" "XDWOCO1_5_" "1:                                 \n" "  pxor %%mm4,%%mm4                    \n" "  movq %%mm4,(%%edi,%%ebx)            \n" "XDWOCO1_5_" "2:                                 \n" "  psubsw %%mm2,%%mm3                  \n" "  movq %%mm4,(%%edi)                  \n" "  movq %%mm3,(%%edi,%%ebx,4)          \n" "  addl $8,%%edi                       \n" "XDWOCO1_5_" "3:                                 \n" "  cmpl %%esi,%%edi                    \n" "  jnc " "XDWOCO1_5_" "9                         \n" "  movq (%%edi,%%ebx,4),%%mm3          \n" "  pxor %%mm2,%%mm2                    \n" "  pcmpeqb (%%edi,%%ebx,2),%%mm2       \n" "  movq %%mm3,%%mm1                    \n" "  paddsw %%mm5,%%mm3                  \n" "  paddsw %%mm7,%%mm1                  \n" "  movq (%%edi),%%mm4                  \n" "  psrlq $16,%%mm5                     \n" "  psllw $1,%%mm2                      \n" "  psubsw %%mm5,%%mm3                  \n" "  packsswb %%mm2,%%mm2                \n" "  movq (%%edi,%%ecx,2),%%mm0          \n" "  psraw $" "6" ",%%mm1                \n" "  movq %%mm6,%%mm5                    \n" "  movd %%mm2,%%eax                    \n" "  psubsw %%mm1,%%mm3                  \n" "  psubsw %%mm4,%%mm6                  \n" "  movq (%%edi,%%ebx),%%mm1            \n" "  psubsw %%mm6,%%mm3                  \n" "  psubsw %%mm5,%%mm0                  \n" "  movq 8(%%edi,%%ecx),%%mm6           \n" "  paddsw %%mm0,%%mm3                  \n" "  psrlq $48,%%mm5                     \n" "  movq %%mm6,%%mm0                    \n" "  psraw $2,%%mm1                      \n" "  psllq $16,%%mm0                     \n" "  psubsw %%mm6,%%mm5                  \n" "  paddsw %%mm1,%%mm4                  \n" "  movq %%mm5,%%mm2                    \n" "  cmpl $0xfefefefe,%%eax              \n" "  psllq $48,%%mm2                     \n" "  paddsw %%mm0,%%mm5                  \n" "  je " "XDWOCO1_5_" "2                          \n" "  cmpl $0x80808080,%%eax              \n" "  je " "XDWOCO1_5_" "1                          \n" "  pcmpeqd %%mm1,%%mm1                 \n" "  psrlq $48,%%mm1                     \n" "  movl $4,%%edx                       \n" "XDWOCO1_5_" "4:                                 \n" "  movzwl (%%edi,%%ebx,2),%%eax        \n" "  testl %%eax,%%eax                   \n" "  je " "XDWOCO1_5_" "8                          \n" "  testl $0x0000fc00,%%eax             \n" "  je " "XDWOCO1_5_" "6                          \n" "  shrl $10,%%eax                      \n" "  addl $32,%%eax                      \n" "  andl $63,%%eax                      \n" "  movd (%%ebp,%%eax,4),%%mm0          \n" "  punpcklwd %%mm0,%%mm0               \n" "  punpckldq %%mm0,%%mm0               \n" "  pand %%mm1,%%mm0                    \n" "  paddsw %%mm0,%%mm4                  \n" "  testl $32,%%eax                     \n" "  jne " "XDWOCO1_5_" "5                         \n" "  addw $0x0400,(%%edi,%%ebx,2)        \n" "  jmp " "XDWOCO1_5_" "8                         \n" "XDWOCO1_5_" "5:                                 \n" "  subw $0x0400,(%%edi,%%ebx,2)        \n" "  jmp " "XDWOCO1_5_" "7                         \n" "XDWOCO1_5_" "6:                                 \n" "  movq %%mm1,%%mm0                    \n" "  pandn %%mm4,%%mm0                   \n" "  movq %%mm0,%%mm4                    \n" "XDWOCO1_5_" "7:                                 \n" "  movw $0,(%%edi,%%ebx)               \n" "XDWOCO1_5_" "8:                                 \n" "  psllq $16,%%mm1                     \n" "  addl $2,%%edi                       \n" "  decl %%edx                          \n" "  jnz " "XDWOCO1_5_" "4                         \n" "  subl $8,%%edi                       \n" "  jmp " "XDWOCO1_5_" "2                         \n" "XDWOCO1_5_" "9:                                 \n" "  frstor (%%esp)                      \n" "  addl $200,%%esp                     \n" "  popl %%edi                          \n" "  popl %%edx                          \n" "  popl %%ebp                          \n" : : "D"(cells),"S"(cells+(count&~3)),"b"(2*xdwCellMemCols), "c"(3*2*xdwCellMemCols),"d"(xdwCellFadingTable) : "eax","memory","cc" ); break;
  }
  i=count&3;
  if (i) xdwOperateCellsOpt0(cells+count-i,i);
  return 1;
 }
# 1672 "xdesktopwaves.c"
 return 0;
}

# 1676 "xdesktopwaves.c"
static int xdwOperateCellsOpt2(short * cells, int count)
{




 /* Optimization level 2 of the cellular automata using the SSE2 instruction
	   set of a 32-bit x86 CPU, implemented as GNU-C inline assembler. It is
	   assumed that the covering of a cell is not greater than 255 (it can be up
	   to 1023 per definition). If it's greater, the algorithm is still correct
	   but takes some extra time. */

 static int reported=0;
 int i;

 if (xdwCPUHasFXSR && xdwCPUHasSSE2) {
  if (!reported) {
   if (xdwOptVerb>=1) printf("Using SSE2 instruction set of 32-bit x86 CPU\n");
   reported=1;
  }
  i=(((short*)0)-cells)&7;
  if (i) {
   xdwOperateCellsOpt0(cells,i);
   cells+=i;
   count-=i;
  }
# 1817 "xdesktopwaves.c"
  switch(xdwOptViscosity) {
   case 1: asm volatile ( "  pushl %%ebp                         \n" "  pushl %%edx                         \n" "  pushl %%edi                         \n" "  movl %%esp,%%eax                    \n" "  subl $512,%%esp                     \n" "  andl $0xfffffff0,%%esp              \n" "  fxsave (%%esp)                      \n" "  push %%eax                          \n" "  movl %%edx,%%ebp                    \n" "  pcmpeqw %%xmm7,%%xmm7               \n" "  psrlw $" "7" ",%%xmm7               \n" "  movdqa (%%edi,%%ecx),%%xmm6         \n" "  movzwl -2(%%edi,%%ecx),%%eax        \n" "  movd %%eax,%%xmm5                   \n" "  movdqa %%xmm6,%%xmm0                \n" "  pslldq $16/8,%%xmm0                 \n" "  paddsw %%xmm0,%%xmm5                \n" "  psubsw %%xmm6,%%xmm5                \n" "  jmp " "XDWOCO2_1_" "3                         \n" "  .balign 16                          \n" "XDWOCO2_1_" "1:                                 \n" "  pxor %%xmm4,%%xmm4                  \n" "  movdqa %%xmm4,(%%edi,%%ebx)         \n" "XDWOCO2_1_" "2:                                 \n" "  psubsw %%xmm2,%%xmm3                \n" "  movdqa %%xmm4,(%%edi)               \n" "  movdqa %%xmm3,(%%edi,%%ebx,4)       \n" "  addl $16,%%edi                      \n" "XDWOCO2_1_" "3:                                 \n" "  cmpl %%esi,%%edi                    \n" "  jnc " "XDWOCO2_1_" "9                         \n" "  movdqa (%%edi,%%ebx,4),%%xmm3       \n" "  pxor %%xmm2,%%xmm2                  \n" "  movdqa %%xmm3,%%xmm1                \n" "  pcmpeqb (%%edi,%%ebx,2),%%xmm2      \n" "  paddsw %%xmm5,%%xmm3                \n" "  paddsw %%xmm7,%%xmm1                \n" "  movdqa (%%edi),%%xmm4               \n" "  psrldq $16/8,%%xmm5                 \n" "  movdqa (%%edi,%%ecx,2),%%xmm0       \n" "  psubsw %%xmm5,%%xmm3                \n" "  psraw $" "10" ",%%xmm1               \n" "  movdqa %%xmm6,%%xmm5                \n" "  psubsw %%xmm1,%%xmm3                \n" "  psubsw %%xmm4,%%xmm6                \n" "  movdqa (%%edi,%%ebx),%%xmm1         \n" "  psubsw %%xmm6,%%xmm3                \n" "  pmovmskb %%xmm2,%%eax               \n" "  psubsw %%xmm5,%%xmm0                \n" "  movdqa 16(%%edi,%%ecx),%%xmm6       \n" "  paddsw %%xmm0,%%xmm3                \n" "  psrldq $112/8,%%xmm5                \n" "  movdqa %%xmm6,%%xmm0                \n" "  psraw $2,%%xmm1                     \n" "  pslldq $16/8,%%xmm0                 \n" "  psubsw %%xmm6,%%xmm5                \n" "  paddsw %%xmm1,%%xmm4                \n" "  movdqa %%xmm5,%%xmm2                \n" "  cmpl $0x0000ffff,%%eax              \n" "  pslldq $112/8,%%xmm2                \n" "  paddsw %%xmm0,%%xmm5                \n" "  je " "XDWOCO2_1_" "2                          \n" "  cmpl $0x0000aaaa,%%eax              \n" "  je " "XDWOCO2_1_" "1                          \n" "  pcmpeqd %%xmm1,%%xmm1               \n" "  psrldq $112/8,%%xmm1                \n" "  movl $8,%%edx                       \n" "XDWOCO2_1_" "4:                                 \n" "  movzwl (%%edi,%%ebx,2),%%eax        \n" "  testl %%eax,%%eax                   \n" "  je " "XDWOCO2_1_" "8                          \n" "  testl $0x0000fc00,%%eax             \n" "  je " "XDWOCO2_1_" "6                          \n" "  shrl $10,%%eax                      \n" "  addl $32,%%eax                      \n" "  andl $63,%%eax                      \n" "  movd (%%ebp,%%eax,4),%%xmm0         \n" "  pshuflw $0,%%xmm0,%%xmm0            \n" "  pshufd $0,%%xmm0,%%xmm0             \n" "  pand %%xmm1,%%xmm0                  \n" "  paddsw %%xmm0,%%xmm4                \n" "  testl $32,%%eax                     \n" "  jne " "XDWOCO2_1_" "5                         \n" "  addw $0x0400,(%%edi,%%ebx,2)        \n" "  jmp " "XDWOCO2_1_" "8                         \n" "XDWOCO2_1_" "5:                                 \n" "  subw $0x0400,(%%edi,%%ebx,2)        \n" "  jmp " "XDWOCO2_1_" "7                         \n" "XDWOCO2_1_" "6:                                 \n" "  movdqa %%xmm1,%%xmm0                \n" "  pandn %%xmm4,%%xmm0                 \n" "  movdqa %%xmm0,%%xmm4                \n" "XDWOCO2_1_" "7:                                 \n" "  movw $0,(%%edi,%%ebx)               \n" "XDWOCO2_1_" "8:                                 \n" "  pslldq $16/8,%%xmm1                 \n" "  addl $2,%%edi                       \n" "  decl %%edx                          \n" "  jnz " "XDWOCO2_1_" "4                         \n" "  subl $16,%%edi                      \n" "  jmp " "XDWOCO2_1_" "2                         \n" "XDWOCO2_1_" "9:                                 \n" "  popl %%eax                          \n" "  fxrstor (%%esp)                     \n" "  movl %%eax,%%esp                    \n" "  popl %%edi                          \n" "  popl %%edx                          \n" "  popl %%ebp                          \n" : : "D"(cells),"S"(cells+(count&~7)),"b"(2*xdwCellMemCols), "c"(3*2*xdwCellMemCols),"d"(xdwCellFadingTable) : "eax","memory","cc" ); break;
   case 2: asm volatile ( "  pushl %%ebp                         \n" "  pushl %%edx                         \n" "  pushl %%edi                         \n" "  movl %%esp,%%eax                    \n" "  subl $512,%%esp                     \n" "  andl $0xfffffff0,%%esp              \n" "  fxsave (%%esp)                      \n" "  push %%eax                          \n" "  movl %%edx,%%ebp                    \n" "  pcmpeqw %%xmm7,%%xmm7               \n" "  psrlw $" "8" ",%%xmm7               \n" "  movdqa (%%edi,%%ecx),%%xmm6         \n" "  movzwl -2(%%edi,%%ecx),%%eax        \n" "  movd %%eax,%%xmm5                   \n" "  movdqa %%xmm6,%%xmm0                \n" "  pslldq $16/8,%%xmm0                 \n" "  paddsw %%xmm0,%%xmm5                \n" "  psubsw %%xmm6,%%xmm5                \n" "  jmp " "XDWOCO2_2_" "3                         \n" "  .balign 16                          \n" "XDWOCO2_2_" "1:                                 \n" "  pxor %%xmm4,%%xmm4                  \n" "  movdqa %%xmm4,(%%edi,%%ebx)         \n" "XDWOCO2_2_" "2:                                 \n" "  psubsw %%xmm2,%%xmm3                \n" "  movdqa %%xmm4,(%%edi)               \n" "  movdqa %%xmm3,(%%edi,%%ebx,4)       \n" "  addl $16,%%edi                      \n" "XDWOCO2_2_" "3:                                 \n" "  cmpl %%esi,%%edi                    \n" "  jnc " "XDWOCO2_2_" "9                         \n" "  movdqa (%%edi,%%ebx,4),%%xmm3       \n" "  pxor %%xmm2,%%xmm2                  \n" "  movdqa %%xmm3,%%xmm1                \n" "  pcmpeqb (%%edi,%%ebx,2),%%xmm2      \n" "  paddsw %%xmm5,%%xmm3                \n" "  paddsw %%xmm7,%%xmm1                \n" "  movdqa (%%edi),%%xmm4               \n" "  psrldq $16/8,%%xmm5                 \n" "  movdqa (%%edi,%%ecx,2),%%xmm0       \n" "  psubsw %%xmm5,%%xmm3                \n" "  psraw $" "9" ",%%xmm1               \n" "  movdqa %%xmm6,%%xmm5                \n" "  psubsw %%xmm1,%%xmm3                \n" "  psubsw %%xmm4,%%xmm6                \n" "  movdqa (%%edi,%%ebx),%%xmm1         \n" "  psubsw %%xmm6,%%xmm3                \n" "  pmovmskb %%xmm2,%%eax               \n" "  psubsw %%xmm5,%%xmm0                \n" "  movdqa 16(%%edi,%%ecx),%%xmm6       \n" "  paddsw %%xmm0,%%xmm3                \n" "  psrldq $112/8,%%xmm5                \n" "  movdqa %%xmm6,%%xmm0                \n" "  psraw $2,%%xmm1                     \n" "  pslldq $16/8,%%xmm0                 \n" "  psubsw %%xmm6,%%xmm5                \n" "  paddsw %%xmm1,%%xmm4                \n" "  movdqa %%xmm5,%%xmm2                \n" "  cmpl $0x0000ffff,%%eax              \n" "  pslldq $112/8,%%xmm2                \n" "  paddsw %%xmm0,%%xmm5                \n" "  je " "XDWOCO2_2_" "2                          \n" "  cmpl $0x0000aaaa,%%eax              \n" "  je " "XDWOCO2_2_" "1                          \n" "  pcmpeqd %%xmm1,%%xmm1               \n" "  psrldq $112/8,%%xmm1                \n" "  movl $8,%%edx                       \n" "XDWOCO2_2_" "4:                                 \n" "  movzwl (%%edi,%%ebx,2),%%eax        \n" "  testl %%eax,%%eax                   \n" "  je " "XDWOCO2_2_" "8                          \n" "  testl $0x0000fc00,%%eax             \n" "  je " "XDWOCO2_2_" "6                          \n" "  shrl $10,%%eax                      \n" "  addl $32,%%eax                      \n" "  andl $63,%%eax                      \n" "  movd (%%ebp,%%eax,4),%%xmm0         \n" "  pshuflw $0,%%xmm0,%%xmm0            \n" "  pshufd $0,%%xmm0,%%xmm0             \n" "  pand %%xmm1,%%xmm0                  \n" "  paddsw %%xmm0,%%xmm4                \n" "  testl $32,%%eax                     \n" "  jne " "XDWOCO2_2_" "5                         \n" "  addw $0x0400,(%%edi,%%ebx,2)        \n" "  jmp " "XDWOCO2_2_" "8                         \n" "XDWOCO2_2_" "5:                                 \n" "  subw $0x0400,(%%edi,%%ebx,2)        \n" "  jmp " "XDWOCO2_2_" "7                         \n" "XDWOCO2_2_" "6:                                 \n" "  movdqa %%xmm1,%%xmm0                \n" "  pandn %%xmm4,%%xmm0                 \n" "  movdqa %%xmm0,%%xmm4                \n" "XDWOCO2_2_" "7:                                 \n" "  movw $0,(%%edi,%%ebx)               \n" "XDWOCO2_2_" "8:                                 \n" "  pslldq $16/8,%%xmm1                 \n" "  addl $2,%%edi                       \n" "  decl %%edx                          \n" "  jnz " "XDWOCO2_2_" "4                         \n" "  subl $16,%%edi                      \n" "  jmp " "XDWOCO2_2_" "2                         \n" "XDWOCO2_2_" "9:                                 \n" "  popl %%eax                          \n" "  fxrstor (%%esp)                     \n" "  movl %%eax,%%esp                    \n" "  popl %%edi                          \n" "  popl %%edx                          \n" "  popl %%ebp                          \n" : : "D"(cells),"S"(cells+(count&~7)),"b"(2*xdwCellMemCols), "c"(3*2*xdwCellMemCols),"d"(xdwCellFadingTable) : "eax","memory","cc" ); break;
   case 3: asm volatile ( "  pushl %%ebp                         \n" "  pushl %%edx                         \n" "  pushl %%edi                         \n" "  movl %%esp,%%eax                    \n" "  subl $512,%%esp                     \n" "  andl $0xfffffff0,%%esp              \n" "  fxsave (%%esp)                      \n" "  push %%eax                          \n" "  movl %%edx,%%ebp                    \n" "  pcmpeqw %%xmm7,%%xmm7               \n" "  psrlw $" "9" ",%%xmm7               \n" "  movdqa (%%edi,%%ecx),%%xmm6         \n" "  movzwl -2(%%edi,%%ecx),%%eax        \n" "  movd %%eax,%%xmm5                   \n" "  movdqa %%xmm6,%%xmm0                \n" "  pslldq $16/8,%%xmm0                 \n" "  paddsw %%xmm0,%%xmm5                \n" "  psubsw %%xmm6,%%xmm5                \n" "  jmp " "XDWOCO2_3_" "3                         \n" "  .balign 16                          \n" "XDWOCO2_3_" "1:                                 \n" "  pxor %%xmm4,%%xmm4                  \n" "  movdqa %%xmm4,(%%edi,%%ebx)         \n" "XDWOCO2_3_" "2:                                 \n" "  psubsw %%xmm2,%%xmm3                \n" "  movdqa %%xmm4,(%%edi)               \n" "  movdqa %%xmm3,(%%edi,%%ebx,4)       \n" "  addl $16,%%edi                      \n" "XDWOCO2_3_" "3:                                 \n" "  cmpl %%esi,%%edi                    \n" "  jnc " "XDWOCO2_3_" "9                         \n" "  movdqa (%%edi,%%ebx,4),%%xmm3       \n" "  pxor %%xmm2,%%xmm2                  \n" "  movdqa %%xmm3,%%xmm1                \n" "  pcmpeqb (%%edi,%%ebx,2),%%xmm2      \n" "  paddsw %%xmm5,%%xmm3                \n" "  paddsw %%xmm7,%%xmm1                \n" "  movdqa (%%edi),%%xmm4               \n" "  psrldq $16/8,%%xmm5                 \n" "  movdqa (%%edi,%%ecx,2),%%xmm0       \n" "  psubsw %%xmm5,%%xmm3                \n" "  psraw $" "8" ",%%xmm1               \n" "  movdqa %%xmm6,%%xmm5                \n" "  psubsw %%xmm1,%%xmm3                \n" "  psubsw %%xmm4,%%xmm6                \n" "  movdqa (%%edi,%%ebx),%%xmm1         \n" "  psubsw %%xmm6,%%xmm3                \n" "  pmovmskb %%xmm2,%%eax               \n" "  psubsw %%xmm5,%%xmm0                \n" "  movdqa 16(%%edi,%%ecx),%%xmm6       \n" "  paddsw %%xmm0,%%xmm3                \n" "  psrldq $112/8,%%xmm5                \n" "  movdqa %%xmm6,%%xmm0                \n" "  psraw $2,%%xmm1                     \n" "  pslldq $16/8,%%xmm0                 \n" "  psubsw %%xmm6,%%xmm5                \n" "  paddsw %%xmm1,%%xmm4                \n" "  movdqa %%xmm5,%%xmm2                \n" "  cmpl $0x0000ffff,%%eax              \n" "  pslldq $112/8,%%xmm2                \n" "  paddsw %%xmm0,%%xmm5                \n" "  je " "XDWOCO2_3_" "2                          \n" "  cmpl $0x0000aaaa,%%eax              \n" "  je " "XDWOCO2_3_" "1                          \n" "  pcmpeqd %%xmm1,%%xmm1               \n" "  psrldq $112/8,%%xmm1                \n" "  movl $8,%%edx                       \n" "XDWOCO2_3_" "4:                                 \n" "  movzwl (%%edi,%%ebx,2),%%eax        \n" "  testl %%eax,%%eax                   \n" "  je " "XDWOCO2_3_" "8                          \n" "  testl $0x0000fc00,%%eax             \n" "  je " "XDWOCO2_3_" "6                          \n" "  shrl $10,%%eax                      \n" "  addl $32,%%eax                      \n" "  andl $63,%%eax                      \n" "  movd (%%ebp,%%eax,4),%%xmm0         \n" "  pshuflw $0,%%xmm0,%%xmm0            \n" "  pshufd $0,%%xmm0,%%xmm0             \n" "  pand %%xmm1,%%xmm0                  \n" "  paddsw %%xmm0,%%xmm4                \n" "  testl $32,%%eax                     \n" "  jne " "XDWOCO2_3_" "5                         \n" "  addw $0x0400,(%%edi,%%ebx,2)        \n" "  jmp " "XDWOCO2_3_" "8                         \n" "XDWOCO2_3_" "5:                                 \n" "  subw $0x0400,(%%edi,%%ebx,2)        \n" "  jmp " "XDWOCO2_3_" "7                         \n" "XDWOCO2_3_" "6:                                 \n" "  movdqa %%xmm1,%%xmm0                \n" "  pandn %%xmm4,%%xmm0                 \n" "  movdqa %%xmm0,%%xmm4                \n" "XDWOCO2_3_" "7:                                 \n" "  movw $0,(%%edi,%%ebx)               \n" "XDWOCO2_3_" "8:                                 \n" "  pslldq $16/8,%%xmm1                 \n" "  addl $2,%%edi                       \n" "  decl %%edx                          \n" "  jnz " "XDWOCO2_3_" "4                         \n" "  subl $16,%%edi                      \n" "  jmp " "XDWOCO2_3_" "2                         \n" "XDWOCO2_3_" "9:                                 \n" "  popl %%eax                          \n" "  fxrstor (%%esp)                     \n" "  movl %%eax,%%esp                    \n" "  popl %%edi                          \n" "  popl %%edx                          \n" "  popl %%ebp                          \n" : : "D"(cells),"S"(cells+(count&~7)),"b"(2*xdwCellMemCols), "c"(3*2*xdwCellMemCols),"d"(xdwCellFadingTable) : "eax","memory","cc" ); break;
   case 4: asm volatile ( "  pushl %%ebp                         \n" "  pushl %%edx                         \n" "  pushl %%edi                         \n" "  movl %%esp,%%eax                    \n" "  subl $512,%%esp                     \n" "  andl $0xfffffff0,%%esp              \n" "  fxsave (%%esp)                      \n" "  push %%eax                          \n" "  movl %%edx,%%ebp                    \n" "  pcmpeqw %%xmm7,%%xmm7               \n" "  psrlw $" "10" ",%%xmm7               \n" "  movdqa (%%edi,%%ecx),%%xmm6         \n" "  movzwl -2(%%edi,%%ecx),%%eax        \n" "  movd %%eax,%%xmm5                   \n" "  movdqa %%xmm6,%%xmm0                \n" "  pslldq $16/8,%%xmm0                 \n" "  paddsw %%xmm0,%%xmm5                \n" "  psubsw %%xmm6,%%xmm5                \n" "  jmp " "XDWOCO2_4_" "3                         \n" "  .balign 16                          \n" "XDWOCO2_4_" "1:                                 \n" "  pxor %%xmm4,%%xmm4                  \n" "  movdqa %%xmm4,(%%edi,%%ebx)         \n" "XDWOCO2_4_" "2:                                 \n" "  psubsw %%xmm2,%%xmm3                \n" "  movdqa %%xmm4,(%%edi)               \n" "  movdqa %%xmm3,(%%edi,%%ebx,4)       \n" "  addl $16,%%edi                      \n" "XDWOCO2_4_" "3:                                 \n" "  cmpl %%esi,%%edi                    \n" "  jnc " "XDWOCO2_4_" "9                         \n" "  movdqa (%%edi,%%ebx,4),%%xmm3       \n" "  pxor %%xmm2,%%xmm2                  \n" "  movdqa %%xmm3,%%xmm1                \n" "  pcmpeqb (%%edi,%%ebx,2),%%xmm2      \n" "  paddsw %%xmm5,%%xmm3                \n" "  paddsw %%xmm7,%%xmm1                \n" "  movdqa (%%edi),%%xmm4               \n" "  psrldq $16/8,%%xmm5                 \n" "  movdqa (%%edi,%%ecx,2),%%xmm0       \n" "  psubsw %%xmm5,%%xmm3                \n" "  psraw $" "7" ",%%xmm1               \n" "  movdqa %%xmm6,%%xmm5                \n" "  psubsw %%xmm1,%%xmm3                \n" "  psubsw %%xmm4,%%xmm6                \n" "  movdqa (%%edi,%%ebx),%%xmm1         \n" "  psubsw %%xmm6,%%xmm3                \n" "  pmovmskb %%xmm2,%%eax               \n" "  psubsw %%xmm5,%%xmm0                \n" "  movdqa 16(%%edi,%%ecx),%%xmm6       \n" "  paddsw %%xmm0,%%xmm3                \n" "  psrldq $112/8,%%xmm5                \n" "  movdqa %%xmm6,%%xmm0                \n" "  psraw $2,%%xmm1                     \n" "  pslldq $16/8,%%xmm0                 \n" "  psubsw %%xmm6,%%xmm5                \n" "  paddsw %%xmm1,%%xmm4                \n" "  movdqa %%xmm5,%%xmm2                \n" "  cmpl $0x0000ffff,%%eax              \n" "  pslldq $112/8,%%xmm2                \n" "  paddsw %%xmm0,%%xmm5                \n" "  je " "XDWOCO2_4_" "2                          \n" "  cmpl $0x0000aaaa,%%eax              \n" "  je " "XDWOCO2_4_" "1                          \n" "  pcmpeqd %%xmm1,%%xmm1               \n" "  psrldq $112/8,%%xmm1                \n" "  movl $8,%%edx                       \n" "XDWOCO2_4_" "4:                                 \n" "  movzwl (%%edi,%%ebx,2),%%eax        \n" "  testl %%eax,%%eax                   \n" "  je " "XDWOCO2_4_" "8                          \n" "  testl $0x0000fc00,%%eax             \n" "  je " "XDWOCO2_4_" "6                          \n" "  shrl $10,%%eax                      \n" "  addl $32,%%eax                      \n" "  andl $63,%%eax                      \n" "  movd (%%ebp,%%eax,4),%%xmm0         \n" "  pshuflw $0,%%xmm0,%%xmm0            \n" "  pshufd $0,%%xmm0,%%xmm0             \n" "  pand %%xmm1,%%xmm0                  \n" "  paddsw %%xmm0,%%xmm4                \n" "  testl $32,%%eax                     \n" "  jne " "XDWOCO2_4_" "5                         \n" "  addw $0x0400,(%%edi,%%ebx,2)        \n" "  jmp " "XDWOCO2_4_" "8                         \n" "XDWOCO2_4_" "5:                                 \n" "  subw $0x0400,(%%edi,%%ebx,2)        \n" "  jmp " "XDWOCO2_4_" "7                         \n" "XDWOCO2_4_" "6:                                 \n" "  movdqa %%xmm1,%%xmm0                \n" "  pandn %%xmm4,%%xmm0                 \n" "  movdqa %%xmm0,%%xmm4                \n" "XDWOCO2_4_" "7:                                 \n" "  movw $0,(%%edi,%%ebx)               \n" "XDWOCO2_4_" "8:                                 \n" "  pslldq $16/8,%%xmm1                 \n" "  addl $2,%%edi                       \n" "  decl %%edx                          \n" "  jnz " "XDWOCO2_4_" "4                         \n" "  subl $16,%%edi                      \n" "  jmp " "XDWOCO2_4_" "2                         \n" "XDWOCO2_4_" "9:                                 \n" "  popl %%eax                          \n" "  fxrstor (%%esp)                     \n" "  movl %%eax,%%esp                    \n" "  popl %%edi                          \n" "  popl %%edx                          \n" "  popl %%ebp                          \n" : : "D"(cells),"S"(cells+(count&~7)),"b"(2*xdwCellMemCols), "c"(3*2*xdwCellMemCols),"d"(xdwCellFadingTable) : "eax","memory","cc" ); break;
   case 5: asm volatile ( "  pushl %%ebp                         \n" "  pushl %%edx                         \n" "  pushl %%edi                         \n" "  movl %%esp,%%eax                    \n" "  subl $512,%%esp                     \n" "  andl $0xfffffff0,%%esp              \n" "  fxsave (%%esp)                      \n" "  push %%eax                          \n" "  movl %%edx,%%ebp                    \n" "  pcmpeqw %%xmm7,%%xmm7               \n" "  psrlw $" "11" ",%%xmm7               \n" "  movdqa (%%edi,%%ecx),%%xmm6         \n" "  movzwl -2(%%edi,%%ecx),%%eax        \n" "  movd %%eax,%%xmm5                   \n" "  movdqa %%xmm6,%%xmm0                \n" "  pslldq $16/8,%%xmm0                 \n" "  paddsw %%xmm0,%%xmm5                \n" "  psubsw %%xmm6,%%xmm5                \n" "  jmp " "XDWOCO2_5_" "3                         \n" "  .balign 16                          \n" "XDWOCO2_5_" "1:                                 \n" "  pxor %%xmm4,%%xmm4                  \n" "  movdqa %%xmm4,(%%edi,%%ebx)         \n" "XDWOCO2_5_" "2:                                 \n" "  psubsw %%xmm2,%%xmm3                \n" "  movdqa %%xmm4,(%%edi)               \n" "  movdqa %%xmm3,(%%edi,%%ebx,4)       \n" "  addl $16,%%edi                      \n" "XDWOCO2_5_" "3:                                 \n" "  cmpl %%esi,%%edi                    \n" "  jnc " "XDWOCO2_5_" "9                         \n" "  movdqa (%%edi,%%ebx,4),%%xmm3       \n" "  pxor %%xmm2,%%xmm2                  \n" "  movdqa %%xmm3,%%xmm1                \n" "  pcmpeqb (%%edi,%%ebx,2),%%xmm2      \n" "  paddsw %%xmm5,%%xmm3                \n" "  paddsw %%xmm7,%%xmm1                \n" "  movdqa (%%edi),%%xmm4               \n" "  psrldq $16/8,%%xmm5                 \n" "  movdqa (%%edi,%%ecx,2),%%xmm0       \n" "  psubsw %%xmm5,%%xmm3                \n" "  psraw $" "6" ",%%xmm1               \n" "  movdqa %%xmm6,%%xmm5                \n" "  psubsw %%xmm1,%%xmm3                \n" "  psubsw %%xmm4,%%xmm6                \n" "  movdqa (%%edi,%%ebx),%%xmm1         \n" "  psubsw %%xmm6,%%xmm3                \n" "  pmovmskb %%xmm2,%%eax               \n" "  psubsw %%xmm5,%%xmm0                \n" "  movdqa 16(%%edi,%%ecx),%%xmm6       \n" "  paddsw %%xmm0,%%xmm3                \n" "  psrldq $112/8,%%xmm5                \n" "  movdqa %%xmm6,%%xmm0                \n" "  psraw $2,%%xmm1                     \n" "  pslldq $16/8,%%xmm0                 \n" "  psubsw %%xmm6,%%xmm5                \n" "  paddsw %%xmm1,%%xmm4                \n" "  movdqa %%xmm5,%%xmm2                \n" "  cmpl $0x0000ffff,%%eax              \n" "  pslldq $112/8,%%xmm2                \n" "  paddsw %%xmm0,%%xmm5                \n" "  je " "XDWOCO2_5_" "2                          \n" "  cmpl $0x0000aaaa,%%eax              \n" "  je " "XDWOCO2_5_" "1                          \n" "  pcmpeqd %%xmm1,%%xmm1               \n" "  psrldq $112/8,%%xmm1                \n" "  movl $8,%%edx                       \n" "XDWOCO2_5_" "4:                                 \n" "  movzwl (%%edi,%%ebx,2),%%eax        \n" "  testl %%eax,%%eax                   \n" "  je " "XDWOCO2_5_" "8                          \n" "  testl $0x0000fc00,%%eax             \n" "  je " "XDWOCO2_5_" "6                          \n" "  shrl $10,%%eax                      \n" "  addl $32,%%eax                      \n" "  andl $63,%%eax                      \n" "  movd (%%ebp,%%eax,4),%%xmm0         \n" "  pshuflw $0,%%xmm0,%%xmm0            \n" "  pshufd $0,%%xmm0,%%xmm0             \n" "  pand %%xmm1,%%xmm0                  \n" "  paddsw %%xmm0,%%xmm4                \n" "  testl $32,%%eax                     \n" "  jne " "XDWOCO2_5_" "5                         \n" "  addw $0x0400,(%%edi,%%ebx,2)        \n" "  jmp " "XDWOCO2_5_" "8                         \n" "XDWOCO2_5_" "5:                                 \n" "  subw $0x0400,(%%edi,%%ebx,2)        \n" "  jmp " "XDWOCO2_5_" "7                         \n" "XDWOCO2_5_" "6:                                 \n" "  movdqa %%xmm1,%%xmm0                \n" "  pandn %%xmm4,%%xmm0                 \n" "  movdqa %%xmm0,%%xmm4                \n" "XDWOCO2_5_" "7:                                 \n" "  movw $0,(%%edi,%%ebx)               \n" "XDWOCO2_5_" "8:                                 \n" "  pslldq $16/8,%%xmm1                 \n" "  addl $2,%%edi                       \n" "  decl %%edx                          \n" "  jnz " "XDWOCO2_5_" "4                         \n" "  subl $16,%%edi                      \n" "  jmp " "XDWOCO2_5_" "2                         \n" "XDWOCO2_5_" "9:                                 \n" "  popl %%eax                          \n" "  fxrstor (%%esp)                     \n" "  movl %%eax,%%esp                    \n" "  popl %%edi                          \n" "  popl %%edx                          \n" "  popl %%ebp                          \n" : : "D"(cells),"S"(cells+(count&~7)),"b"(2*xdwCellMemCols), "c"(3*2*xdwCellMemCols),"d"(xdwCellFadingTable) : "eax","memory","cc" ); break;
  }
  i=count&7;
  if (i) xdwOperateCellsOpt0(cells+count-i,i);
  return 1;
 }
# 1972 "xdesktopwaves.c"
 return 0;
}
